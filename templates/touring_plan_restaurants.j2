<html>

{# Our app.py code borrowed significantly from the flask starter app code
https://github.com/osu-cs340-ecampus/flask-starter-app
We used the skeleton code for connecting to the db and used the same style for routing and templates.
We updated the code to match our columns and added routes for out M:N relationships
between Touring Plans and Restaurants and Touring Plans and Rides. We followed a similar pattern
for add/delete/update/get operations for each of our tables the routing and templating. 

We also used the course materials in the Explorations to add route 
handling capabilities, and to use gunicorn.
Source URL: https://canvas.oregonstate.edu/courses/1967354/pages/exploration-developing-in-flask?module_item_id=24460849

Original work: We added pages for our M:N relationship to display in a separate Plan View. #}

<head>
	<title>Touring Plans Restaurants</title>
	<link href="style.css" rel="stylesheet" type="text/css" />
	<script language="JavaScript">
		function showform(dowhat) {
		/*
		 * four DIVS: browse, insert, update, delete
		 * this function sets one visible the others not
		 */
		if(dowhat == 'insert') {
			document.getElementById('browse').style.display = 'none';
			document.getElementById('insert').style.display = 'block';
			document.getElementById('edit').style.display = 'none';
			document.getElementById('delete').style.display = 'none';
		} else if(dowhat == 'update') {
			document.getElementById('browse').style.display = 'none';
			document.getElementById('insert').style.display = 'none';
			document.getElementById('edit').style.display = 'block';
			document.getElementById('delete').style.display = 'none';
		} else if(dowhat == 'delete') {
			document.getElementById('browse').style.display = 'none';
			document.getElementById('insert').style.display = 'none';
			document.getElementById('edit').style.display = 'none';
			document.getElementById('delete').style.display = 'block';
		} else if(dowhat == 'all') {
			document.getElementById('browse').style.display = 'block';
			document.getElementById('insert').style.display = 'block';
			document.getElementById('edit').style.display = 'block';
			document.getElementById('delete').style.display = 'block';
		} else { //by default display browse
			document.getElementById('browse').style.display = 'block';
			document.getElementById('insert').style.display = 'none';
			document.getElementById('edit').style.display = 'none';
			document.getElementById('delete').style.display = 'none';
		}
	}
	
	function newTouringPlanRestaurant() {
		showform('insert');
	}

	function browseTouringPlanRestaurants() {
		showform('browse');
	}

	function showAll() {
		showform('all');
	}
	</script>
</head>

<body onload="browseTouringPlanRestaurants()">
	<h1>Touring Plan Restaurants</h1> 
	[ <a href=" {{ url_for('home')}}">Home</a> |<a href="{{ url_for('parks')}}">Parks</a> | <a href="{{ url_for('rides')}}">Rides</a> | <a href="{{ url_for('restaurants')}}">Restaurants</a>  | <a href="{{ url_for('touring_plans')}}">Touring Plans</a> ]

	<div id="browse">
		<p><a href="#" onClick="newTouringPlanRestaurant()">Add New</a> </p>
		<table border="1" cellpadding="5">
            <!-- Access data tuple passed from app.py --> 
            {% if data %}
			    <thead>
				    <tr>
					    <!-- Iterate through each key in the first entry to get the column name -->
                        {% for key in restaurants[0].keys() %}
					    
                        <!-- Create a <th> tag with the key inside of it, this will be our header row -->
					    <th scope="col" data-field="{{ key }}" data-filter-control="input">{{ key }}</th>
					
                        <!-- End of this for loop -->
                        {% endfor %} 
                    </tr>

				<tbody>
					<!-- Now, iterate through every item in data -->{% for item in data %}
					    <tr>
						    <!-- Then iterate through every key in the current item dictionary -->
                            {% for key in item.keys() %}

						    <!-- Create a <td> element with the value of that key in it -->
						    <td> {{item[key]}} </td> 
                            {% endfor %}

    

					    </tr> 
                        {% endfor %} 
                {% endif %} 
        </table>   
	<p>&nbsp;</p>
	</div>	<!-- browse -->

	<div id="insert">
		<!-- form to INSERT new data into Restaurants-->
		<form id="insertTouringPlanRestaurant" action="/touring_plan_restaurants/{{restaurant_plans[0].planID}}" method="post">
			<legend><strong>Add Restaurant</strong></legend>
			<fieldset>
                <!-- placeholder shows ghost text, required forces an input, pattern forces input adherence -->
				<label for="restaurantName">Restaurant name:</label>
				<input type="text" class="form-control" id="restaurantName" name="restaurantName" placeholder="" required>


            </fieldset>

            <!-- Create 'Add Restaurant' and 'Cancel' buttons -->
			<input type="submit" value="insertRestaurant" name="insertRestaurant" class="btn btn-primary" style="margin:.5rem;">
			<input class="btn" type="button" value="Cancel" onClick="browseTouringPlanRestaurants()"> 
        </form>
	</div><!--insert-->
	

</body>
</html>