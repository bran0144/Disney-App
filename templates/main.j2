<html>
{# Our app.py code borrowed significantly from the flask starter app code
https://github.com/osu-cs340-ecampus/flask-starter-app
We used the skeleton code for connecting to the db and used the same style for routing and templates.
We updated the code to match our columns and added routes for out M:N relationships
between Touring Plans and Restaurants and Touring Plans and Rides. We followed a similar pattern
for add/delete/update/get operations for each of our tables the routing and templating. 

We also used the course materials in the Explorations to add route 
handling capabilities, and to use gunicorn.
Source URL: https://canvas.oregonstate.edu/courses/1967354/pages/exploration-developing-in-flask?module_item_id=24460849

Original work: We added pages for our M:N relationship to display in a separate Plan View. #}


<head>
<title>Home Page</title>
<link href="style.css" rel="stylesheet" type="text/css" />
</head>

<body>
<h1>Home Page</h1>

[ <a href=" {{ url_for('home')}}">Home</a> | <a href=" {{ url_for('parks')}}">Parks</a> | <a href =" {{ url_for('rides')}}">Rides</a> | <a href=" {{ url_for('visitors')}}">Visitors</a> | <a href=" {{ url_for('restaurants')}}">Restaurants</a> | <a href=" {{ url_for('touring_plans')}}">Touring Plans</a>  ]

<p>Parks page displays all parks and allows user to insert a new park</p>
<p>Rides page displays all rides and allows user to insert a new ride with a dropdown for park name</p>
<p>Visitors page displays all visitors and allows user to insert a new visitor</p>
<p>Restuarants page displays all restaurants and allows user to insert a new restaurant, update a restaurant, and delete a restaurant.</p>
<p>Touring Plans page displays all touring plans and allows user to insert a new touring plan.</p>
</body>
</html>
